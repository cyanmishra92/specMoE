=== ORIGINAL PDF: 2505.20250v1_Efficient_Optimization_Accelerator_Framework_for_M.pdf ===\n\nRaw text length: 36420 characters\nCleaned text length: 35888 characters\nNumber of segments: 21\n\n=== CLEANED TEXT ===\n\narXiv:2505.20250v1 [cs.AR] 26 May 2025 Efficient Optimization Accelerator Framework for Multi- state Ising Problems Chirag Garg1, Sayeef Salahuddin1 1Department of Electrical Engineering and Computer Sciences, University of California, Berkeley, California 94720, USA Ising Machines are a prominent class of hardware architectures that aim to solve NP-Hard combinatorial optimization problems. These machines consist of a network of interacting binary spins neurons that evolve to represent the optimum ground state energy solution. Generally, combinatorial problems are transformed into quadratic unconstrained binary optimization (QUBO) form to harness the computational efficiency of these Ising machines. However, this transformation, especially for multi-state problems, often leads to a more com- plex exploration landscape than the original problem, thus severely impacting the solution quality. To address this challenge, we model the spin interactions as a generalized boolean logic function to significantly reduce the exploration space. We benchmark the graph col- oring problem from the class of multi-state NP-hard optimization using probabilistic Ising solvers to illustrate the effectiveness of our framework. The proposed methodology achieves similar accuracy compared to state-of-the-art heuristics and machine learning algorithms, and demonstrates significant improvement over the existing Ising methods. Additionally, we demonstrate that combining parallel tempering with our existing framework further reduces the coloring error by up to 50 compared to the conventionally used Gibbs sampling algo- rithm. We also design a 1024-neuron all-to-all connected probabilistic Ising accelerator that shows up to 10000 performance acceleration compared to heuristics while reducing the number of required physical neurons by 1.5-4 compared to conventional Ising machines. Indeed, this accelerator solution demonstrates improvement across all metrics over the cur- rent methods, i.e., energy, performance, area, and solution quality. Thus, this work expands the potential of existing Ising hardware to solve a broad class of these multistate optimization problems. New computing paradigms are getting significant attention due to exponentially growing computing needs 1. A wide variety of problems falls into the class of non-deterministic polynomial- time hard (NP-hard) and are difficult to solve optimally using conventional computing solutions 2,3. The solution space grows exponentially with problem size, therefore brute force searching does not work. However, heuristics 4 and annealing 2 based approaches have been conventionally used to tackle these computationally hard problems in domains such as logistics 5,6, biology 7, integrated circuits design 8, etc. In this context, Ising machines-based accelerators 9 16 are currently being leveraged to efficiently find the solution to hard optimization problems. Various technologies and hardware architectures have been explored to build these Ising accelerators including quantum an- nealing with superconducting qubits 17, classical annealing in memristor or RRAM 18,19, coherent Ising machines employing optical oscillators 13,20, coupled oscillators 14,16,21, neuromorphic hard- 1 ware 22 and stochastic circuits (probabilistic bits) 9,10,12,23. Quantum annealers show promising results 24 but require low temperatures making them expensive in cost and power. Therefore, classi- cal alternatives have gained attention due to their room-temperature operation and realization using the current semiconductor process flow. This work particularly focuses on stochastic probabilistic Ising machines to efficiently solve combinatorial optimization problems. Probabilistic Ising architectures follow Boltzmann machine binary neural network principles 25,26. These architectures are physically constructed using binary stochastic neurons interacting with each other and aim to minimize the Ising Hamiltonian (Fig. 1a, Supplementary Note 1). The neuron update follows sigmoidal activation (Fig. 1b) such that neurons stochastically move towards the minimum energy states (Fig. 1c). To harness the efficient solution exploration of these hardware architectures, the cost energy functions of many complex optimization problems are converted into Ising Hamiltonian form. Based on this conversion, these optimization problems can be broadly divided into three categories (Fig. 1d) 27. The problem class comprised of binary solution state space with no imposed constraints has been widely mapped and efficiently solved on Ising machines 16,20,26. On the other hand, problems with integer multi-state valued solutions do not naturally convert to binary solution state space, thus leading to additional constraints in the converted Ising Hamiltonian 27 29. This direct conversion method frequently causes the Ising machines to explore infeasible solution space, resulting in inefficiencies 18,30,31. One such example is solving the graph coloring problem with Ising machines. Graph coloring is an NP-hard optimization problem that seeks to assign different colors to the connected nodes of a graph network. It is an example of an integer optimization problem where each integral value represents the color of a node. Previously, annealing and heuristic methods (Tabu-search 32) were utilized to tackle this problem. These approaches achieve good solution ac- curacy but suffer from long runtimes for large and densely connected problem instances. Recently, learning-based approaches33,34 especially graph neural networks are applied to solve the problem accurately and efficiently at a scale. Conventional Ising hardware or its modified versions are also proposed to solve this problem. However, they significantly lag behind heuristics and learning- based approaches in solution quality. To an extent, earlier works 18,30,31 overcome this bottleneck by adopting post-processing techniques using additional hardware and software, which adversely affects area and computation time. In this work, we present an end-to-end probabilistic Ising implementation that combines advances in multi-state problem mapping, spin interaction design, and an efficient hardware ar- chitecture to demonstrate significant improvement in area, solution accuracy, and time-to-solution. First, we propose vectorized mapping that represents the node colors as binary vectors rather than using the customary one-hot form. This circumvents the additional mapping constraint in the Ising Hamiltonian that arises due to one-hot encoding 27. Thus, it completely discards the exploration of infeasible invalid solution space and improves the solution quality. Second, the interactions among the binary vector states are modeled using truth tables employed in digital logic. Third, we im- plement an efficient FPGA accelerator that uses higher-order multiplexers to represent these truth 2 tables. Altogether, this multi-state Ising implementation shows approximately 10000 speed im- provement and 5 power improvement compared to GPUs for solving problems up to 256 nodes and 16 colors graph coloring problems. This current methodology is then integrated with the par- allel tempering approach to improve the solution quality and provide competitive or even better coloring results than Tabucol heuristics and machine learning algorithms. Mapping Framework A wide range of combinatorial optimization problems belongs to multistate integer-valued solu- tion space, including graph coloring, knapsack problems 35, etc. Graph coloring problem, inves- tigated in this work, has applications, such as layout decomposition36, register allocation37, logic minimization38, scheduling33, and many more. The problem instance that aims to color N nodes with q colors, requires Nq physical neurons nodes in the conventional Ising framework. Because this framework relies on one-hot encoding to represent node colors, additional constraints are im- posed in Hamiltonian to enforce the legal combination of one-hot bits 27. It is written as: HB X i (1 q X k 1 sik)2 (1) where sik represents kth one-hot bit for node i. This soft constraint Hamiltonian is expected to be zero for the ground state energy solution. However, it often takes the non-zero value, thereby making Ising samplers inefficient in solving such problems. (see Fig. 2a). The one-hot encoding requires q bits to represent q possible colors of a node. As a result, Ising machines search over 2q states with only q valid states in the solution space. It makes the optimization hard and deteriorates the solution quality. Hence, the conventional Ising framework often fails to solve this class of problems. Despite these challenges, this approach is often adopted for most multistate optimization problems because it leads to quadratic interactions supported in most Ising machines 10,16,20,26. In probabilistic computing 12, binary multiplexers offer simplistic and efficient realization for state- weight multiplication. In this work, we propose a vectorized mapping approach (Fig. 2b) to tailor the graph coloring problem using a binary encoding technique. It represents the q color state using log2q bits vector and requires N log2q physical neurons nodes for a graph coloring problem with N nodes and q colors. In this way, it eliminates all invalid state space and removes the extra constraints in Ising Hamiltonian (Eq. 1). Therefore, the proposed approach leads to a solvable energy landscape without any additional complexities. We also adopt parallel tempering 39 to enhance the solution exploration and improve the solution quality. The proposed vector mapping is a generic approach that can be applied to any multistate optimization problem being solved on Ising accelerators (see Fig. 2b). First, we model the func- tion F (see Fig. 2b) in the Hamiltonian for a specific problem. Here multiplication factor Wij enforces edge connectivity. F is modeled in a truth table-based format. These truth tables can 3 then be represented via multiplexers to develop a probabilistic accelerator employing the proposed mapping. For graph coloring problems, for the cases when the nodes (si and sj) take the same value or color value greater than q (invalid colors), F becomes one. F is zero for the rest of the cases. The resulting Hamiltonian is a higher-order polynomial. It is minimized when F is zero, implying graph coloring criteria are satisfied. The hardware architecture for this scheme is derived from the standard node update rule for probabilistic Ising machines. For kth bit of node si, the update rule is as follows: P(sik 1) σ 1 T dH dsik (2) where sik takes binary value 0 and 1. The binary nature of sik converts the differentiation trans- forms into H equal to Hsik 1 - Hsik 0. This H is implemented in hardware using higher-order multiplexers followed by a subtraction unit (see Fig. 2), called as vecmul unit. The rest of the hardware implementation remains the same as shown in Fig. 1. Results Next we investigate the proposed vectorized mapping approach for the graph coloring problem. For benchmarking, we have used it on publicly available COLOR dataset 40. First, we implement both probabilistic Ising and proposed vectorized approaches on GPU for comparison. Fig. 3 shows the results for the queen13_13 problem, which is deemed a hard problem 33. For both schemes, the exploration for solution happens in a similar way (Fig. 3a). For this particular instance, none of the states explored by the Ising framework is valid and therefore unable to find reasonable so- lutions for most of the problem instances (Fig. 3b) (for more details, see Supplementary section S1). This comparison for other problem instances in the dataset is shown in the Extended Data Fig. S1 and S2. Further, we employ the parallel tempering method to enhance the exploration while sampling the energy landscape. This method involves the simultaneous simulation of M replica systems with vectorized mapping running at different temperature schedules. At high tempera- tures, the system tends to explore the broad region of the solution space while low temperatures allow precise sampling around a particular region (Fig. 2b). High-temperature replicas ensure that the system doesn t get stuck around the local minimum solution. The states of higher-temperature replica systems are exchanged with low-temperature systems via a swap rule (see Supplementary Section 2). This state exchange phenomenon enables the exploration of certain parts of solution space which could not be possible via a single temperature schedule. Fig. 3c depicts the energy ex- ploration for the queen13_13 problem using the parallel tempering approach. It clearly shows that the system continuously escapes from the minimum local energy solution and therefore, achieves the best possible solution accuracy. We benchmark the vectorized mapping solution accuracy for graph coloring problems in the dataset against learning-based approaches including graph neural network (GNNs) 34 and its derivative architectures GraphSage (PI-SAGE) 33 and heuristics-based approach, i.e., Tabucol 32. GNN-based solvers frame the coloring problem as a multi-class node classification problem and 4 employ unsupervised training by formulating a loss function. In contrast, the Tabucol technique searches the ground state energy solution by moving small steps and maintains a tabu list to avoid cycling around local minima. We implement Tabucol heuristics on Intel Xeon Gold 6330 pro- cessor and solve the graph coloring problem instances 200 times with 1000 iteration steps each. For accuracy comparison, we also run Ising and vectorized mapping framework with single-flip Gibbs sampling on Nvidia A100 Tensor Core GPU and solve the same problems 200 times with 1000 iteration steps each. The results comparing the described methods are shown in Table 1. It includes easy, medium, and hard problem instances labeled in work 41. The Ising approach per- forms worse by only being able to solve small and easy problem instances. Among GNN-based solvers, the GraphSage architecture (PI-SAGE) offers better solution accuracy but it suffers from longer training times 33. By contrast, proposed vectorized mapping gives competitive coloring results compared to Tabucol heuristics and PI-SAGE GNN while having slightly lower accuracy for hard-to-solve problem instances. Employing the described parallel tempering with vectorized mapping reduces the error up to 50 on these hard problems and therefore performs better than other methods. We implement the proposed vectorized architecture (Fig. 2) onto VCU118 FPGA to estab- lish the performance acceleration and energy efficiency benchmarks. The FPGA accelerator uses the memory-mapped IO interface used by software applications to program the problem weights and take the solution out (see Supplementary Section 3 for more details). The accelerator (Fig. 1) fetches the weight data from the memory and does neuron states-weight multiplication. The accumulated product is passed through a sigmoid activation implemented using LUT and further compared with a Linear Feedback Shift Register (LFSR) based random number generator (RNG) to get the updated node value. The architecture runs at 90 MHz clock frequency where only one node gets updated in each cycle. Further, it supports graph coloring problem sizes up to 256 nodes all-to-all connected with a maximum chromatic number of 16, equivalent to 1024 vectorized nodes in total. The framework achieves the same accuracy for dataset problems as the GPU-based vec- torized mapping (see Table 1). The proposed architecture not only gives better accuracy than the baseline Ising-based archi- tecture but also reduces the area implementation. The area implementation is quantified in terms of number of physical nodes required to map any problem instance and solve it. The increase in physical nodes leads to an increase in the number of interactions and hence accumulator size grows leading to a penalty on the implementation area. Fig. 4a shows that the vectorized mapping requires 1.5-4 times fewer nodes for the graph coloring problem instances with chromatic numbers up to 16. The FPGA implementation of the proposed approach shows 1000 - 10000 speedup com- pared to Tabucol heuristics implemented on Intel Xeon Gold 6330 CPU cores and its equivalent implementation on Nvidia A100 Tensor Core GPU (see Fig. 4b). Vectorized mapping on GPU could not take advantage of efficient multiplication of binary states with weights and, therefore, suffers with time-to-solution. The same hypothesis will hold for the accelerators that are not built 5 to support these binary calculations. The FPGA accelerator also offers 5 power improvements over GPU implementation. Therefore, accelerating the time-to-solution by 3-4 orders of magnitude on FPGA at a low power budget significantly improves energy efficiency. Conclusion Current methods employ the brute-force framework to map and solve multistate Ising problems onto conventional Ising machines by using one-hot state encoding. This work presents an alter- native approach of vectorized mapping that maps the state using binary encoding. It not only reduces state exploration from 2qN to 2 log2q N for a q color problem instance but also removes the constraints resulting from the conventional brute-force Ising approach. As a result, the pro- posed approach converges close to the optimal solution achieved by heuristics and learning based approaches. Exising work 12,16,20 on Ising Machines and its derivative frameworks generally aims to achieve accuracy within a certain error range compared to heuristics. However, we show that our method combined with parallel tempering achieves the solution accuracy even better than the heuristics for some of the problems, while retaining the ability to significant speed up on a custom accelerator. We also present a generalized truth table-based method that can be leveraged to map other multi-state problems. Using probabilistic Ising machine architectures, these truth tables to model the neuron interactions can be directly mapped onto higher order multiplexers. We have im- plemented this architecture on FPGA to benchmark time-to-solution, energy efficiency, and area efficiency. Overall, the hardware implementation consumes 5W power and achieves approximately 1000 - 10000 speedup compared to heuristics on CPU and vectorized mapping on GPU. The presented hardware and software framework provides a new way to substantially expand the capa- bilities of the Ising machines to accurately handle a wide range of multistate optimization problems in a performance and energy-efficient manner. 6 Supplementary Section 1. Probabilistic Ising Machines Probabilistic Ising machines follow the principle of the Boltzmann Machine binary neural net- work. Therefore, the probability distribution corresponding to a given state p(s) 1 Ze βE(s) where Z P s e βE(s) is the normalizing partition function. The distribution is sampled such that the Ising machine stochastically moves towards higher probability states and lower energy. It is enabled by appropriately formulating the update rule which for Hamiltonian of the form H(s) P i P j Wijsisj P i bisi, is given by P(si 1 s) σ(P i j Wijsj bi) where si { 1, 1}. 2. Parallel Tempering The parallel tempering algorithm utilizes multiple Markov chains (replica chains) running at dif- ferent temperature schedules representing different probability distributions. It allows a broader exploration of the energy landscape and facilitates better mixing to avoid local energy minima solutions. In this work, we implement 100 parallel chains running at a constant temperature geo- metrically spaced from temp0 (0.01) and tempn (40). After every 15 sampling steps, adjacent pairs of chains are swapped alternatively staring with odd and even chain indexes. The update rule is given as: r exp 1 T1 1 T2 (H(sT1) H(sT2)) (3) Pswap(sT1 sT2) min(1, r) (4) 3. FPGA Setup PCIe In this work, we implement the vectorized mapping on the Xilinx Virte UltraScale VCU118 FPGA evaluation kit. The FPGA is interfaced with CPU using peripheral component intercon- nect express (PCIe) interface. In particular, we use open-source xillybus IP core for the interface with data transfer capabilities of 50MB s. The data is transferred via a memory mapped interface implemented using block memory and a designed memory controller. The digital implementation of 256 nodes and 16 color accelerators supports a network of 1024 probabilistic Ising nodes. These nodes consist of an LFSR-based pseudorandom number generator with a fixed seed, a lookup table-based sigmoidal activation, higher order multiplexer- based matrix multiplication, and a threshold that generates the output state of the neuron. These states are stored in the local memory of FPGA and then transfered to CPU via PCIe interface. 7 Acknowledgements This work is supported by MURI project from Department of Defense and Office of Naval Research. Author Contributions C.G. formulated the vectorized scheme, performed the CPU GPU benchmarks and designed the vectorized accelerator on FPGA. C.G, and S.S co-wrote the manuscript; S.S supervised the research. All authors contributed to discussions and commented on the manuscript. Competing Interests The authors declare that they have no competing financial interests. Correspondence Correspondence and requests for materials can be addressed to either C.G. or S.S. Code and Data Availability Code and Data will be made available on reasonable request by emailing C.G. or S.S. 8 Wij 𝐻𝑠 𝑊!"𝑠!𝑠" 𝑏!𝑠! ! " ! Weights Bias Neuron States Vecmul Addition Neighboring Neurons RNG si 𝑃𝑠! 1 𝑠) 𝜎 𝑊!"𝑠" 𝑏! ! " Neuron Update s E(s) Optimization Problems Binary States No Constraints Integer States No Constraints Integer States External Constraints Ø Max-Cut Ø Graph Coloring Ø Resource Allocation Ø Travelling Salesman Problem si a b c d Figure 1: . Probabilistic Ising Machine Architecture and Optimization Problem Classifica- tion a, Quadratic unconstrained binary optimization (QUBO) problems are represented as an Ising net- work with nodes representing the states and edges depicting interactions between them. b, Prob- abilistic Ising architecture based on the Boltzmann machine update rule to minimize the problem Hamiltonian and energy function. c, The State of the Ising machine evolves and converges to the optimal energy solution. d, Classification of optimization problems based on the state values and problem constraints. 9 Ising Framework Proposed Vec-Temp Framework 0 4 node 3 colors 1 2 3 1 0 Node Color 0 1 2 3 0 1 2 Valid Solution Color 0 1 2 3 0 1 2 Invalid Solution Node Energy State Space Graph Coloring 𝑃𝑠!" 1 𝜎 1 𝑇 𝑑𝐻 𝑑𝑠!" Vecmul for node si 𝑊!!!" 1 0 s1 0 1 0 s2 𝑊!!! 0 1 0 sj 𝑊!!! 0 𝐻 𝐵 , 1 , 𝑠!" " ! 𝐴, , 𝑠!"𝑠'" " (!,') , 0 4 node 3 colors 1 2 3 1 0 Color 0 1 2 3 Node Graph Coloring Energy State Space Energy State Space T0 T1 T2 T3 Vectorized Mapping Parallel Tempering (Si, Sj) 𝜖E Si à {si0, si1} Sj à {sj0, sj1} 𝐻 , 𝑊-!-" Ϝ 𝑠!., 𝑠! , , 𝑠'., 𝑠' , -!, -" 𝜖 , 𝑃𝑠!" 1 𝜎 1 𝑇 𝑑𝐻 𝑑𝑠!" Vecmul for node si0 interacting with node sj {si1,sj0,sj1} 5 0 0 1 2 3 4 6 7 0 5 0 {si1,sj0,sj1} 0 1 2 3 4 6 7 0 𝑊!!! 0 𝑊"!" 0 𝑊!!! 𝑊"!" 𝑊!!! - si0 1 si0 0 00 10 01 10 T 𝑆 𝑆 𝑆 ,𝑆 [0, 𝑄 1] si0 si1 sj0 sj1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 F 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 1 0 si1 Figure 2: Comparison between Ising and Vectorized Mapping Approaches a, The baseline Ising framework employs one-hot encoding to map N node q color graph coloring problem to Nq nodes. The encoding constraint is enforced by adding an extra term in the Hamilto- nian leading to a complex optimization landscape. Since only q states are valid among 2q states for a node, this mapping often explores a lot of invalid solution space making it hard for Ising hardware to reach the optimal energy solution. This mapping preserves QUBO Hamiltonian, therefore, the interactions are modeled via binary multiplexers in hardware. b, Vectorized framework maps the q color state of a node using log2q hardware nodes. It allows exploration only in valid solution space making it easier for hardware to reach ground-state energy solutions. The solution explo- ration is further enhanced by the adoption of parallel tempering. This mapping can be modeled in truth table format which is directly mapped to a higher-order multiplexer in hardware. 10 queen13_13 - GPU Ising Vectorized queen13_13 - GPU Ising Vectorized a b c queen13_13 - GPU Vectorized Parallel Tempering Figure 3: Solution Exploration in Ising and Vectorized Mapping framework. a, Energy evolution for queen13_13 problem instance mapped and solved using Ising and Vector- ized mapping implementation on GPU. (b) Valid and Invalid energy states recorded during solution exploration employing Ising and Vectorized implementation. Ising framework explores completely over invalid solution space making it hard to reach an optimal solution. (c) Vectorized framework combined with parallel tempering enhances the solution exploration avoiding the states being stuck around local minima solution. 11 Ising Vectorized 3 orders 4 orders Tabucol Vectorized GPU Vectorized FPGA a b Figure 4: Area and Performance Efficiency Benchmarks a, Physical implementation nodes used in Ising and Vectorized mapping approach for dataset prob- lem 40. (b) Time-to-solution (TTS) comparison of vectorized mapping implemented on FPGA with Tabucol heuristic on CPU and it equivalent implementation on GPU. 12 Table 1: Solution accuracy in terms of wrongly colored edges (lower value is better) comparison of heuristic (Tabucol), learning-based approaches (GNN and PI-SAGE), Ising methods, and Vec- torized framework. NA is mentioned for problem instances not reported in 33. Problem nodes edges colors GNN33 PI-SAGE33 Tabucol Probabilistic Ising Vectorized GPU Vectorized FPGA Vectorized Parallel Tempering GPU anna 138 493 11 1 0 0 - 0 0 0 myciel5 47 236 6 0 0 0 0 0 0 0 myciel6 95 755 7 0 0 0 0 0 0 0 queen5_5 25 160 5 0 0 0 0 0 0 0 queen6_6 36 290 7 4 0 0 - 1 1 0 queen7_7 49 476 7 15 0 0 - 6 5 0 queen8_8 64 728 9 7 1 0 - 4 2 1 queen9_9 81 1056 10 13 1 0 - 5 4 2 queen8_12 96 1368 12 7 0 0 - 2 2 0 queen11_11 121 1980 11 33 17 15 - 20 18 14 queen13_13 169 3328 13 40 26 21 - 31 26 21 13 References 1. Sevilla, J. et al. Compute trends across three eras of machine learning. In 2022 International Joint Conference on Neural Networks (IJCNN), 1 8 (2022). 2. Kirkpatrick, S., Gelatt, C. D. Vecchi, M. P. Optimization by simulated annealing. Science 220, 671 680 (1983). 3. Hochba, D. S. Approximation algorithms for np-hard problems. SIGACT News 28, 40 52 (1997). 4. Colorni, A. et al. Heuristics from nature for hard combinatorial optimization problems. In- ternational Transactions in Operational Research 3, 1 21 (1996). com doi pdf 10.1111 j.1475-3995.1996.tb00032.x. 5. Weinberg, S. J., Sanches, F., Ide, T., Kamiya, K. Correll, R. Supply chain logistics with quantum and classical annealing algorithms. Scientific Reports 13, 4770 (2023). 6. Tao, Q. Han, J. Solving traveling salesman problems via a parallel fully connected ising machine. In Proceedings of the 59th ACM IEEE Design Automation Conference, DAC 22, 1123 1128 (Association for Computing Machinery, New York, NY, USA, 2022). 7. Li, R. Y., Di Felice, R., Rohs, R. Lidar, D. A. Quantum annealing versus classical machine learning applied to a simplified computational biology problem. npj Quantum Information 4, 14 (2018). 8. Gerlach, T. et al. Fpga-placement via quantum annealing. In Proceedings of the 2024 ACM SIGDA International Symposium on Field Programmable Gate Arrays, FPGA 24, 43 (Association for Computing Machinery, New York, NY, USA, 2024). 9. Patel, S., Canoza, P. Salahuddin, S. Logically synthesized and hardware-accelerated re- stricted Boltzmann machines for combinatorial optimization and integer factorization. Nature Electronics 2022 5:2 5, 92 101 (2022). 10. Borders, W. A. et al. Integer factorization using stochastic magnetic tunnel junctions. Nature 573, 390 393 (2019). 11. Aadit, N. A. et al. Massively parallel probabilistic computing with sparse ising machines. Nature Electronics 5, 460 468 (2022). 12. Patel, S. et al. PASS: An Asynchronous Probabilistic Processor for Next Generation Intelli- gence. ArXiv (2024). abs 2409.10325. 13. McMahon, P. L. et al. A fully programmable 100-spin coherent ising machine with all-to-all connections. Science 354, 614 617 (2016). aah5178. 14 14. Moy, W. et al. A 1,968-node coupled ring oscillator circuit for combinatorial optimization problem solving. Nature Electronics 5, 310 317 (2022). 15. Chowdhury, S., Camsari, K. Y. Datta, S. Accelerated quantum monte carlo with probabilis- tic computers. Communications Physics 6, 1 7 (2023). 16. Lo, H., Moy, W., Yu, H., Sapatnekar, S. Kim, C. H. An Ising solver chip based on coupled ring oscillators with a 48-node all-to-all connected array architecture. Nature Electronics 6, 771 778 (2023). 17. McGeoch, C., Farre, P. Boothby, K. The D-Wave Advantage2 Prototype. Tech. Rep., D-Wave Systems Inc. (2023). Technical Report. 18. Yue, W., Zhang, T., Jing, Z. et al. A scalable universal ising machine based on interaction- centric storage and compute-in-memory. Nature Electronics (2024). 19. Chiang, H.-W., Nien, C.-F., Cheng, H.-Y. Huang, K.-P. Reaim: A reram-based adaptive ising machine for solving combinatorial optimization problems. In 2024 ACM IEEE 51st Annual International Symposium on Computer Architecture (ISCA), 58 72 (2024). 20. Inagaki, T. et al. A coherent ising machine for 2000-node optimization problems. Science 354, 603 606 (2016). 21. Wang, T. Roychowdhury, J. Oim: Oscillator-based ising machines for solving combinatorial optimisation problems. In McQuillan, I. Seki, S. (eds.) Unconventional Computation and Natural Computation, 232 256 (Springer International Publishing, Cham, 2019). 22. Chen, Z. et al. ON-OFF Neuromorphic ISING Machines using Fowler-Nordheim Annealers. ArXiv (2024). 2406.05224. 23. Niazi, S., Chowdhury, S., Aadit, N. et al. Training deep boltzmann networks with sparse ising machines. Nature Electronics 7, 610 619 (2024). 24. McGeoch, C. C., Chern, K., Farré, P. King, A. K. A comment on comparing optimization on D-Wave and IBM quantum processors. ArXiv (2024). 2406.19351. 25. Camsari, K. Y., Faria, R., Sutton, B. M. Datta, S. Stochastic p-bits for invertible logic. Phys. Rev. X 7, 031014 (2017). 26. Patel, S., Chen, L., Canoza, P. Salahuddin, S. Ising Model Optimization Problems on a FPGA Accelerated Restricted Boltzmann Machine (2020). 27. Lucas, A. Ising formulations of many np problems. Frontiers in Physics 2 (2014). 28. Silva, C., Aguiar, A., Lima, P. et al. Mapping graph coloring to quantum annealing. Quantum Machine Intelligence 2, 16 (2020). 15 29. Kawakami, S. et al. A constrained graph coloring solver based on ising machines. In 2023 IEEE International Conference on Consumer Electronics (ICCE), 1 6 (2023). 30. Inaba, K., Inagaki, T., Igarashi, K. et al. Potts model solver based on hybrid physical and digital architecture. Communications Physics 5, 137 (2022). 31. Whitehead, W., Nelson, Z., Camsari, K. et al. Cmos-compatible ising and potts annealing using single-photon avalanche diodes. Nature Electronics 6, 1009 1019 (2023). 32. Hertz, A. de Werra, D. Using tabu search techniques for graph coloring. Computing 39, 345 351 (1987). 33. Schuetz, M. J. A., Brubaker, J. K., Zhu, Z. Katzgraber, H. G. Graph coloring with physics- inspired graph neural networks. Phys. Rev. Res. 4, 043131 (2022). 34. Li, W. et al. Rethinking graph neural networks for the graph coloring problem. ArXiv (2022). 2208.06975. 35. Koopmans, T. C. Beckmann, M. Assignment problems and the location of economic activ- ities. Econometrica 25, 53 76 (1957). Accessed 29 Sept. 2024. 36. Kahng, A. B., Park, C.-H., Xu, X. Yao, H. Layout decomposition approaches for double patterning lithography. IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems 29, 939 952 (2010). 37. Smith, M. D., Ramsey, N. Holloway, G. A generalized algorithm for graph-coloring register allocation. In Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation, PLDI 04, 277 288 (Association for Computing Machinery, New York, NY, USA, 2004). 38. Ciesielski, M., Yang, S. Perkowski, M. Multiple-valued boolean minimization based on graph coloring. In Proceedings 1989 IEEE International Conference on Computer Design: VLSI in Computers and Processors, 262 265 (1989). 39. Earl, D. J. Deem, M. W. Parallel tempering: theory, applications, and new perspectives. Physical Chemistry Chemical Physics 7, 3910 3916 (2005). 40. Trick, M. COLOR Dataset (2002). Accessed: 2024-09-29. 41. Gualandi, S. Malucelli, F. Exact solution of graph coloring problems via constraint pro- gramming and column generation. INFORMS Journal on Computing 24, 81 100 (2012). 16 Extended Data Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 60 70 Energy anna Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 Energy david Invalid States Ising Valid States Ising Valid States Vectorized 0 20 40 60 80 100 Energy games120 Invalid States Ising Valid States Ising Valid States Vectorized 0 2 4 6 8 10 12 14 Energy myciel3 Invalid States Ising Valid States Ising Valid States Vectorized 0 5 10 15 20 25 Energy myciel4 Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 Energy myciel5 Invalid States Ising Valid States Ising Valid States Vectorized 0 20 40 60 80 100 Energy myciel6 Invalid States Ising Valid States Ising Valid States Vectorized 0 50 100 150 200 Energy myciel7 Invalid States Ising Valid States Ising Valid States Vectorized 50 75 100 125 150 175 200 Energy queen11_11 Invalid States Ising Valid States Ising Valid States Vectorized 100 150 200 250 Energy queen13_13 Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 60 Energy queen5_5 Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 Energy queen6_6 Invalid States Ising Valid States Ising Valid States Vectorized 10 20 30 40 50 60 70 80 Energy queen7_7 Invalid States Ising Valid States Ising Valid States Vectorized 0 20 40 60 80 100 120 Energy queen8_12 Invalid States Ising Valid States Ising Valid States Vectorized 20 40 60 80 100 Energy queen8_8 Invalid States Ising Valid States Ising Valid States Vectorized 20 40 60 80 100 120 Energy queen9_9 Figure S1: Valid and invalid energy states explored while solving the graph coloring problem instances 40 on Ising and Vectorized mapping framework. 17 0 100 200 300 400 500 Sample 0 10 20 30 40 50 Energy anna 0 100 200 300 400 500 Sample 0 10 20 30 40 Energy david 0 100 200 300 400 500 Sample 0 20 40 60 80 100 Energy games120 0 100 200 300 400 500 Sample 0 1 2 3 4 5 6 Energy myciel3 0 100 200 300 400 500 Sample 0 2 4 6 8 10 12 14 16 Energy myciel4 0 100 200 300 400 500 Sample 0 10 20 30 40 Energy myciel5 0 100 200 300 400 500 Sample 0 20 40 60 80 Energy myciel6 0 100 200 300 400 500 Sample 0 25 50 75 100 125 150 175 Energy myciel7 0 100 200 300 400 500 Sample 40 60 80 100 120 140 160 180 Energy queen11_11 0 100 200 300 400 500 Sample 75 100 125 150 175 200 225 Energy queen13_13 0 100 200 300 400 500 Sample 0 5 10 15 20 25 30 Energy queen5_5 0 100 200 300 400 500 Sample 5 10 15 20 25 30 35 Energy queen6_6 0 100 200 300 400 500 Sample 10 20 30 40 50 60 70 Energy queen7_7 0 100 200 300 400 500 Sample 0 20 40 60 80 100 Energy queen8_12 0 100 200 300 400 500 Sample 20 40 60 80 Energy queen8_8 0 100 200 300 400 500 Sample 20 40 60 80 100 Energy queen9_9 Figure S2: Evolution of energy while solving the graph coloring problem instances 40 on Ising and Vectorized mapping framework. 18\n\n=== SEGMENTS ===\n\n--- Segment 1 ---\narXiv:2505.20250v1 [cs.AR] 26 May 2025 Efficient Optimization Accelerator Framework for Multi- state Ising Problems Chirag Garg1, Sayeef Salahuddin1 1Department of Electrical Engineering and Computer Sciences, University of California, Berkeley, California 94720, USA Ising Machines are a prominent class of hardware architectures that aim to solve NP-Hard combinatorial optimization problems. These machines consist of a network of interacting binary spins neurons that evolve to represent the optimum ground state energy solution. Generally, combinatorial problems are transformed into quadratic unconstrained binary optimization (QUBO) form to harness the computational efficiency of these Ising machines. However, this transformation, especially for multi-state problems, often leads to a more com- plex exploration landscape than the original problem, thus severely impacting the solution quality. To address this challenge, we model the spin interactions as a generalized boolean logic function to significantly reduce the exploration space. We benchmark the graph col- oring problem from the class of multi-state NP-hard optimization using probabilistic Ising solvers to illustrate the effectiveness of our framework. The proposed methodology achieves similar accuracy compared to state-of-the-art heuristics and machine learning algorithms, and demonstrates significant improvement over the existing Ising methods. Additionally, we demonstrate that combining parallel tempering with our existing framework further reduces the coloring error by up to 50 compared to the conventionally used Gibbs sampling algo- rithm. We also design a 1024-neuron all-to-all connected probabilistic Ising accelerator that shows up to 10000 performance acceleration compared to heuristics while reducing the number of required physical neurons by 1.5-4 compared to conventional Ising machines. Indeed, this accelerator solution demonstrates improvement across all metrics over the cur- rent methods, i.e., energy, performance, area, and solution quality. Thus, this work expands the potential of existing Ising hardware to solve a broad class of these multistate optimization problems. New computing paradigms are getting significant attention due to exponentially growing computing needs 1. A wide variety of problems falls into the class of non-deterministic polynomial- time hard (NP-hard) and are difficult to solve optimally using conventional computing solutions 2,3. The solution space grows exponentially with problem size, therefore brute force searching does not work.\n\n--- Segment 2 ---\nA wide variety of problems falls into the class of non-deterministic polynomial- time hard (NP-hard) and are difficult to solve optimally using conventional computing solutions 2,3. The solution space grows exponentially with problem size, therefore brute force searching does not work. However, heuristics 4 and annealing 2 based approaches have been conventionally used to tackle these computationally hard problems in domains such as logistics 5,6, biology 7, integrated circuits design 8, etc. In this context, Ising machines-based accelerators 9 16 are currently being leveraged to efficiently find the solution to hard optimization problems. Various technologies and hardware architectures have been explored to build these Ising accelerators including quantum an- nealing with superconducting qubits 17, classical annealing in memristor or RRAM 18,19, coherent Ising machines employing optical oscillators 13,20, coupled oscillators 14,16,21, neuromorphic hard- 1 ware 22 and stochastic circuits (probabilistic bits) 9,10,12,23. Quantum annealers show promising results 24 but require low temperatures making them expensive in cost and power. Therefore, classi- cal alternatives have gained attention due to their room-temperature operation and realization using the current semiconductor process flow. This work particularly focuses on stochastic probabilistic Ising machines to efficiently solve combinatorial optimization problems. Probabilistic Ising architectures follow Boltzmann machine binary neural network principles 25,26. These architectures are physically constructed using binary stochastic neurons interacting with each other and aim to minimize the Ising Hamiltonian (Fig. 1a, Supplementary Note 1). The neuron update follows sigmoidal activation (Fig. 1b) such that neurons stochastically move towards the minimum energy states (Fig. 1c). To harness the efficient solution exploration of these hardware architectures, the cost energy functions of many complex optimization problems are converted into Ising Hamiltonian form. Based on this conversion, these optimization problems can be broadly divided into three categories (Fig. 1d) 27. The problem class comprised of binary solution state space with no imposed constraints has been widely mapped and efficiently solved on Ising machines 16,20,26. On the other hand, problems with integer multi-state valued solutions do not naturally convert to binary solution state space, thus leading to additional constraints in the converted Ising Hamiltonian 27 29.\n\n--- Segment 3 ---\nThe problem class comprised of binary solution state space with no imposed constraints has been widely mapped and efficiently solved on Ising machines 16,20,26. On the other hand, problems with integer multi-state valued solutions do not naturally convert to binary solution state space, thus leading to additional constraints in the converted Ising Hamiltonian 27 29. This direct conversion method frequently causes the Ising machines to explore infeasible solution space, resulting in inefficiencies 18,30,31. One such example is solving the graph coloring problem with Ising machines. Graph coloring is an NP-hard optimization problem that seeks to assign different colors to the connected nodes of a graph network. It is an example of an integer optimization problem where each integral value represents the color of a node. Previously, annealing and heuristic methods (Tabu-search 32) were utilized to tackle this problem. These approaches achieve good solution ac- curacy but suffer from long runtimes for large and densely connected problem instances. Recently, learning-based approaches33,34 especially graph neural networks are applied to solve the problem accurately and efficiently at a scale. Conventional Ising hardware or its modified versions are also proposed to solve this problem. However, they significantly lag behind heuristics and learning- based approaches in solution quality. To an extent, earlier works 18,30,31 overcome this bottleneck by adopting post-processing techniques using additional hardware and software, which adversely affects area and computation time. In this work, we present an end-to-end probabilistic Ising implementation that combines advances in multi-state problem mapping, spin interaction design, and an efficient hardware ar- chitecture to demonstrate significant improvement in area, solution accuracy, and time-to-solution. First, we propose vectorized mapping that represents the node colors as binary vectors rather than using the customary one-hot form. This circumvents the additional mapping constraint in the Ising Hamiltonian that arises due to one-hot encoding 27. Thus, it completely discards the exploration of infeasible invalid solution space and improves the solution quality. Second, the interactions among the binary vector states are modeled using truth tables employed in digital logic. Third, we im- plement an efficient FPGA accelerator that uses higher-order multiplexers to represent these truth 2 tables.\n\n--- Segment 4 ---\nSecond, the interactions among the binary vector states are modeled using truth tables employed in digital logic. Third, we im- plement an efficient FPGA accelerator that uses higher-order multiplexers to represent these truth 2 tables. Altogether, this multi-state Ising implementation shows approximately 10000 speed im- provement and 5 power improvement compared to GPUs for solving problems up to 256 nodes and 16 colors graph coloring problems. This current methodology is then integrated with the par- allel tempering approach to improve the solution quality and provide competitive or even better coloring results than Tabucol heuristics and machine learning algorithms. Mapping Framework A wide range of combinatorial optimization problems belongs to multistate integer-valued solu- tion space, including graph coloring, knapsack problems 35, etc. Graph coloring problem, inves- tigated in this work, has applications, such as layout decomposition36, register allocation37, logic minimization38, scheduling33, and many more. The problem instance that aims to color N nodes with q colors, requires Nq physical neurons nodes in the conventional Ising framework. Because this framework relies on one-hot encoding to represent node colors, additional constraints are im- posed in Hamiltonian to enforce the legal combination of one-hot bits 27. It is written as: HB X i (1 q X k 1 sik)2 (1) where sik represents kth one-hot bit for node i. This soft constraint Hamiltonian is expected to be zero for the ground state energy solution. However, it often takes the non-zero value, thereby making Ising samplers inefficient in solving such problems. (see Fig. 2a). The one-hot encoding requires q bits to represent q possible colors of a node. As a result, Ising machines search over 2q states with only q valid states in the solution space. It makes the optimization hard and deteriorates the solution quality. Hence, the conventional Ising framework often fails to solve this class of problems. Despite these challenges, this approach is often adopted for most multistate optimization problems because it leads to quadratic interactions supported in most Ising machines 10,16,20,26. In probabilistic computing 12, binary multiplexers offer simplistic and efficient realization for state- weight multiplication. In this work, we propose a vectorized mapping approach (Fig.\n\n--- Segment 5 ---\nIn probabilistic computing 12, binary multiplexers offer simplistic and efficient realization for state- weight multiplication. In this work, we propose a vectorized mapping approach (Fig. 2b) to tailor the graph coloring problem using a binary encoding technique. It represents the q color state using log2q bits vector and requires N log2q physical neurons nodes for a graph coloring problem with N nodes and q colors. In this way, it eliminates all invalid state space and removes the extra constraints in Ising Hamiltonian (Eq. 1). Therefore, the proposed approach leads to a solvable energy landscape without any additional complexities. We also adopt parallel tempering 39 to enhance the solution exploration and improve the solution quality. The proposed vector mapping is a generic approach that can be applied to any multistate optimization problem being solved on Ising accelerators (see Fig. 2b). First, we model the func- tion F (see Fig. 2b) in the Hamiltonian for a specific problem. Here multiplication factor Wij enforces edge connectivity. F is modeled in a truth table-based format. These truth tables can 3 then be represented via multiplexers to develop a probabilistic accelerator employing the proposed mapping. For graph coloring problems, for the cases when the nodes (si and sj) take the same value or color value greater than q (invalid colors), F becomes one. F is zero for the rest of the cases. The resulting Hamiltonian is a higher-order polynomial. It is minimized when F is zero, implying graph coloring criteria are satisfied. The hardware architecture for this scheme is derived from the standard node update rule for probabilistic Ising machines. For kth bit of node si, the update rule is as follows: P(sik 1) σ 1 T dH dsik (2) where sik takes binary value 0 and 1. The binary nature of sik converts the differentiation trans- forms into H equal to Hsik 1 - Hsik 0. This H is implemented in hardware using higher-order multiplexers followed by a subtraction unit (see Fig. 2), called as vecmul unit. The rest of the hardware implementation remains the same as shown in Fig. 1. Results Next we investigate the proposed vectorized mapping approach for the graph coloring problem. For benchmarking, we have used it on publicly available COLOR dataset 40.\n\n--- Segment 6 ---\nResults Next we investigate the proposed vectorized mapping approach for the graph coloring problem. For benchmarking, we have used it on publicly available COLOR dataset 40. First, we implement both probabilistic Ising and proposed vectorized approaches on GPU for comparison. Fig. 3 shows the results for the queen13_13 problem, which is deemed a hard problem 33. For both schemes, the exploration for solution happens in a similar way (Fig. 3a). For this particular instance, none of the states explored by the Ising framework is valid and therefore unable to find reasonable so- lutions for most of the problem instances (Fig. 3b) (for more details, see Supplementary section S1). This comparison for other problem instances in the dataset is shown in the Extended Data Fig. S1 and S2. Further, we employ the parallel tempering method to enhance the exploration while sampling the energy landscape. This method involves the simultaneous simulation of M replica systems with vectorized mapping running at different temperature schedules. At high tempera- tures, the system tends to explore the broad region of the solution space while low temperatures allow precise sampling around a particular region (Fig. 2b). High-temperature replicas ensure that the system doesn t get stuck around the local minimum solution. The states of higher-temperature replica systems are exchanged with low-temperature systems via a swap rule (see Supplementary Section 2). This state exchange phenomenon enables the exploration of certain parts of solution space which could not be possible via a single temperature schedule. Fig. 3c depicts the energy ex- ploration for the queen13_13 problem using the parallel tempering approach. It clearly shows that the system continuously escapes from the minimum local energy solution and therefore, achieves the best possible solution accuracy. We benchmark the vectorized mapping solution accuracy for graph coloring problems in the dataset against learning-based approaches including graph neural network (GNNs) 34 and its derivative architectures GraphSage (PI-SAGE) 33 and heuristics-based approach, i.e., Tabucol 32. GNN-based solvers frame the coloring problem as a multi-class node classification problem and 4 employ unsupervised training by formulating a loss function. In contrast, the Tabucol technique searches the ground state energy solution by moving small steps and maintains a tabu list to avoid cycling around local minima.\n\n--- Segment 7 ---\nGNN-based solvers frame the coloring problem as a multi-class node classification problem and 4 employ unsupervised training by formulating a loss function. In contrast, the Tabucol technique searches the ground state energy solution by moving small steps and maintains a tabu list to avoid cycling around local minima. We implement Tabucol heuristics on Intel Xeon Gold 6330 pro- cessor and solve the graph coloring problem instances 200 times with 1000 iteration steps each. For accuracy comparison, we also run Ising and vectorized mapping framework with single-flip Gibbs sampling on Nvidia A100 Tensor Core GPU and solve the same problems 200 times with 1000 iteration steps each. The results comparing the described methods are shown in Table 1. It includes easy, medium, and hard problem instances labeled in work 41. The Ising approach per- forms worse by only being able to solve small and easy problem instances. Among GNN-based solvers, the GraphSage architecture (PI-SAGE) offers better solution accuracy but it suffers from longer training times 33. By contrast, proposed vectorized mapping gives competitive coloring results compared to Tabucol heuristics and PI-SAGE GNN while having slightly lower accuracy for hard-to-solve problem instances. Employing the described parallel tempering with vectorized mapping reduces the error up to 50 on these hard problems and therefore performs better than other methods. We implement the proposed vectorized architecture (Fig. 2) onto VCU118 FPGA to estab- lish the performance acceleration and energy efficiency benchmarks. The FPGA accelerator uses the memory-mapped IO interface used by software applications to program the problem weights and take the solution out (see Supplementary Section 3 for more details). The accelerator (Fig. 1) fetches the weight data from the memory and does neuron states-weight multiplication. The accumulated product is passed through a sigmoid activation implemented using LUT and further compared with a Linear Feedback Shift Register (LFSR) based random number generator (RNG) to get the updated node value. The architecture runs at 90 MHz clock frequency where only one node gets updated in each cycle. Further, it supports graph coloring problem sizes up to 256 nodes all-to-all connected with a maximum chromatic number of 16, equivalent to 1024 vectorized nodes in total. The framework achieves the same accuracy for dataset problems as the GPU-based vec- torized mapping (see Table 1).\n\n--- Segment 8 ---\nFurther, it supports graph coloring problem sizes up to 256 nodes all-to-all connected with a maximum chromatic number of 16, equivalent to 1024 vectorized nodes in total. The framework achieves the same accuracy for dataset problems as the GPU-based vec- torized mapping (see Table 1). The proposed architecture not only gives better accuracy than the baseline Ising-based archi- tecture but also reduces the area implementation. The area implementation is quantified in terms of number of physical nodes required to map any problem instance and solve it. The increase in physical nodes leads to an increase in the number of interactions and hence accumulator size grows leading to a penalty on the implementation area. Fig. 4a shows that the vectorized mapping requires 1.5-4 times fewer nodes for the graph coloring problem instances with chromatic numbers up to 16. The FPGA implementation of the proposed approach shows 1000 - 10000 speedup com- pared to Tabucol heuristics implemented on Intel Xeon Gold 6330 CPU cores and its equivalent implementation on Nvidia A100 Tensor Core GPU (see Fig. 4b). Vectorized mapping on GPU could not take advantage of efficient multiplication of binary states with weights and, therefore, suffers with time-to-solution. The same hypothesis will hold for the accelerators that are not built 5 to support these binary calculations. The FPGA accelerator also offers 5 power improvements over GPU implementation. Therefore, accelerating the time-to-solution by 3-4 orders of magnitude on FPGA at a low power budget significantly improves energy efficiency. Conclusion Current methods employ the brute-force framework to map and solve multistate Ising problems onto conventional Ising machines by using one-hot state encoding. This work presents an alter- native approach of vectorized mapping that maps the state using binary encoding. It not only reduces state exploration from 2qN to 2 log2q N for a q color problem instance but also removes the constraints resulting from the conventional brute-force Ising approach. As a result, the pro- posed approach converges close to the optimal solution achieved by heuristics and learning based approaches. Exising work 12,16,20 on Ising Machines and its derivative frameworks generally aims to achieve accuracy within a certain error range compared to heuristics.\n\n--- Segment 9 ---\nAs a result, the pro- posed approach converges close to the optimal solution achieved by heuristics and learning based approaches. Exising work 12,16,20 on Ising Machines and its derivative frameworks generally aims to achieve accuracy within a certain error range compared to heuristics. However, we show that our method combined with parallel tempering achieves the solution accuracy even better than the heuristics for some of the problems, while retaining the ability to significant speed up on a custom accelerator. We also present a generalized truth table-based method that can be leveraged to map other multi-state problems. Using probabilistic Ising machine architectures, these truth tables to model the neuron interactions can be directly mapped onto higher order multiplexers. We have im- plemented this architecture on FPGA to benchmark time-to-solution, energy efficiency, and area efficiency. Overall, the hardware implementation consumes 5W power and achieves approximately 1000 - 10000 speedup compared to heuristics on CPU and vectorized mapping on GPU. The presented hardware and software framework provides a new way to substantially expand the capa- bilities of the Ising machines to accurately handle a wide range of multistate optimization problems in a performance and energy-efficient manner. 6 Supplementary Section 1. Probabilistic Ising Machines Probabilistic Ising machines follow the principle of the Boltzmann Machine binary neural net- work. Therefore, the probability distribution corresponding to a given state p(s) 1 Ze βE(s) where Z P s e βE(s) is the normalizing partition function. The distribution is sampled such that the Ising machine stochastically moves towards higher probability states and lower energy. It is enabled by appropriately formulating the update rule which for Hamiltonian of the form H(s) P i P j Wijsisj P i bisi, is given by P(si 1 s) σ(P i j Wijsj bi) where si { 1, 1}. 2. Parallel Tempering The parallel tempering algorithm utilizes multiple Markov chains (replica chains) running at dif- ferent temperature schedules representing different probability distributions. It allows a broader exploration of the energy landscape and facilitates better mixing to avoid local energy minima solutions. In this work, we implement 100 parallel chains running at a constant temperature geo- metrically spaced from temp0 (0.01) and tempn (40).\n\n--- Segment 10 ---\nIt allows a broader exploration of the energy landscape and facilitates better mixing to avoid local energy minima solutions. In this work, we implement 100 parallel chains running at a constant temperature geo- metrically spaced from temp0 (0.01) and tempn (40). After every 15 sampling steps, adjacent pairs of chains are swapped alternatively staring with odd and even chain indexes. The update rule is given as: r exp 1 T1 1 T2 (H(sT1) H(sT2)) (3) Pswap(sT1 sT2) min(1, r) (4) 3. FPGA Setup PCIe In this work, we implement the vectorized mapping on the Xilinx Virte UltraScale VCU118 FPGA evaluation kit. The FPGA is interfaced with CPU using peripheral component intercon- nect express (PCIe) interface. In particular, we use open-source xillybus IP core for the interface with data transfer capabilities of 50MB s. The data is transferred via a memory mapped interface implemented using block memory and a designed memory controller. The digital implementation of 256 nodes and 16 color accelerators supports a network of 1024 probabilistic Ising nodes. These nodes consist of an LFSR-based pseudorandom number generator with a fixed seed, a lookup table-based sigmoidal activation, higher order multiplexer- based matrix multiplication, and a threshold that generates the output state of the neuron. These states are stored in the local memory of FPGA and then transfered to CPU via PCIe interface. 7 Acknowledgements This work is supported by MURI project from Department of Defense and Office of Naval Research. Author Contributions C.G. formulated the vectorized scheme, performed the CPU GPU benchmarks and designed the vectorized accelerator on FPGA. C.G, and S.S co-wrote the manuscript; S.S supervised the research. All authors contributed to discussions and commented on the manuscript. Competing Interests The authors declare that they have no competing financial interests. Correspondence Correspondence and requests for materials can be addressed to either C.G. or S.S. Code and Data Availability Code and Data will be made available on reasonable request by emailing C.G. or S.S. 8 Wij 𝐻𝑠 𝑊!\n\n--- Segment 11 ---\nor S.S. Code and Data Availability Code and Data will be made available on reasonable request by emailing C.G. or S.S. 8 Wij 𝐻𝑠 𝑊! "𝑠!𝑠" 𝑏!𝑠! ! " ! Weights Bias Neuron States Vecmul Addition Neighboring Neurons RNG si 𝑃𝑠! 1 𝑠) 𝜎 𝑊! "𝑠" 𝑏! ! " Neuron Update s E(s) Optimization Problems Binary States No Constraints Integer States No Constraints Integer States External Constraints Ø Max-Cut Ø Graph Coloring Ø Resource Allocation Ø Travelling Salesman Problem si a b c d Figure 1: . Probabilistic Ising Machine Architecture and Optimization Problem Classifica- tion a, Quadratic unconstrained binary optimization (QUBO) problems are represented as an Ising net- work with nodes representing the states and edges depicting interactions between them. b, Prob- abilistic Ising architecture based on the Boltzmann machine update rule to minimize the problem Hamiltonian and energy function. c, The State of the Ising machine evolves and converges to the optimal energy solution. d, Classification of optimization problems based on the state values and problem constraints. 9 Ising Framework Proposed Vec-Temp Framework 0 4 node 3 colors 1 2 3 1 0 Node Color 0 1 2 3 0 1 2 Valid Solution Color 0 1 2 3 0 1 2 Invalid Solution Node Energy State Space Graph Coloring 𝑃𝑠!" 1 𝜎 1 𝑇 𝑑𝐻 𝑑𝑠!" Vecmul for node si 𝑊!!!" 1 0 s1 0 1 0 s2 𝑊!!! 0 1 0 sj 𝑊!!! 0 𝐻 𝐵 , 1 , 𝑠!" " ! 𝐴, , 𝑠!\n\n--- Segment 12 ---\n" ! 𝐴, , 𝑠! "𝑠'" " (!,') , 0 4 node 3 colors 1 2 3 1 0 Color 0 1 2 3 Node Graph Coloring Energy State Space Energy State Space T0 T1 T2 T3 Vectorized Mapping Parallel Tempering (Si, Sj) 𝜖E Si à {si0, si1} Sj à {sj0, sj1} 𝐻 , 𝑊-!-" Ϝ 𝑠!., 𝑠! , , 𝑠'., 𝑠' , -!, -" 𝜖 , 𝑃𝑠!" 1 𝜎 1 𝑇 𝑑𝐻 𝑑𝑠!" Vecmul for node si0 interacting with node sj {si1,sj0,sj1} 5 0 0 1 2 3 4 6 7 0 5 0 {si1,sj0,sj1} 0 1 2 3 4 6 7 0 𝑊!!! 0 𝑊"!" 0 𝑊!!! 𝑊"!" 𝑊!!! - si0 1 si0 0 00 10 01 10 T 𝑆 𝑆 𝑆 ,𝑆 [0, 𝑄 1] si0 si1 sj0 sj1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 F 1 1 1 1 1 1 0 0 0 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 1 0 si1 Figure 2: Comparison between Ising and Vectorized Mapping Approaches a, The baseline Ising framework employs one-hot encoding to map N node q color graph coloring problem to Nq nodes. The encoding constraint is enforced by adding an extra term in the Hamilto- nian leading to a complex optimization landscape. Since only q states are valid among 2q states for a node, this mapping often explores a lot of invalid solution space making it hard for Ising hardware to reach the optimal energy solution. This mapping preserves QUBO Hamiltonian, therefore, the interactions are modeled via binary multiplexers in hardware.\n\n--- Segment 13 ---\nSince only q states are valid among 2q states for a node, this mapping often explores a lot of invalid solution space making it hard for Ising hardware to reach the optimal energy solution. This mapping preserves QUBO Hamiltonian, therefore, the interactions are modeled via binary multiplexers in hardware. b, Vectorized framework maps the q color state of a node using log2q hardware nodes. It allows exploration only in valid solution space making it easier for hardware to reach ground-state energy solutions. The solution explo- ration is further enhanced by the adoption of parallel tempering. This mapping can be modeled in truth table format which is directly mapped to a higher-order multiplexer in hardware. 10 queen13_13 - GPU Ising Vectorized queen13_13 - GPU Ising Vectorized a b c queen13_13 - GPU Vectorized Parallel Tempering Figure 3: Solution Exploration in Ising and Vectorized Mapping framework. a, Energy evolution for queen13_13 problem instance mapped and solved using Ising and Vector- ized mapping implementation on GPU. (b) Valid and Invalid energy states recorded during solution exploration employing Ising and Vectorized implementation. Ising framework explores completely over invalid solution space making it hard to reach an optimal solution. (c) Vectorized framework combined with parallel tempering enhances the solution exploration avoiding the states being stuck around local minima solution. 11 Ising Vectorized 3 orders 4 orders Tabucol Vectorized GPU Vectorized FPGA a b Figure 4: Area and Performance Efficiency Benchmarks a, Physical implementation nodes used in Ising and Vectorized mapping approach for dataset prob- lem 40. (b) Time-to-solution (TTS) comparison of vectorized mapping implemented on FPGA with Tabucol heuristic on CPU and it equivalent implementation on GPU. 12 Table 1: Solution accuracy in terms of wrongly colored edges (lower value is better) comparison of heuristic (Tabucol), learning-based approaches (GNN and PI-SAGE), Ising methods, and Vec- torized framework. NA is mentioned for problem instances not reported in 33.\n\n--- Segment 14 ---\n12 Table 1: Solution accuracy in terms of wrongly colored edges (lower value is better) comparison of heuristic (Tabucol), learning-based approaches (GNN and PI-SAGE), Ising methods, and Vec- torized framework. NA is mentioned for problem instances not reported in 33. Problem nodes edges colors GNN33 PI-SAGE33 Tabucol Probabilistic Ising Vectorized GPU Vectorized FPGA Vectorized Parallel Tempering GPU anna 138 493 11 1 0 0 - 0 0 0 myciel5 47 236 6 0 0 0 0 0 0 0 myciel6 95 755 7 0 0 0 0 0 0 0 queen5_5 25 160 5 0 0 0 0 0 0 0 queen6_6 36 290 7 4 0 0 - 1 1 0 queen7_7 49 476 7 15 0 0 - 6 5 0 queen8_8 64 728 9 7 1 0 - 4 2 1 queen9_9 81 1056 10 13 1 0 - 5 4 2 queen8_12 96 1368 12 7 0 0 - 2 2 0 queen11_11 121 1980 11 33 17 15 - 20 18 14 queen13_13 169 3328 13 40 26 21 - 31 26 21 13 References 1. Sevilla, J. et al. Compute trends across three eras of machine learning. In 2022 International Joint Conference on Neural Networks (IJCNN), 1 8 (2022). 2. Kirkpatrick, S., Gelatt, C. D. Vecchi, M. P. Optimization by simulated annealing. Science 220, 671 680 (1983). 3. Hochba, D. S. Approximation algorithms for np-hard problems. SIGACT News 28, 40 52 (1997). 4. Colorni, A. et al. Heuristics from nature for hard combinatorial optimization problems. In- ternational Transactions in Operational Research 3, 1 21 (1996). com doi pdf 10.1111 j.1475-3995.1996.tb00032.x. 5. Weinberg, S. J., Sanches, F., Ide, T., Kamiya, K. Correll, R. Supply chain logistics with quantum and classical annealing algorithms. Scientific Reports 13, 4770 (2023). 6. Tao, Q. Han, J.\n\n--- Segment 15 ---\n6. Tao, Q. Han, J. Solving traveling salesman problems via a parallel fully connected ising machine. In Proceedings of the 59th ACM IEEE Design Automation Conference, DAC 22, 1123 1128 (Association for Computing Machinery, New York, NY, USA, 2022). 7. Li, R. Y., Di Felice, R., Rohs, R. Lidar, D. A. Quantum annealing versus classical machine learning applied to a simplified computational biology problem. npj Quantum Information 4, 14 (2018). 8. Gerlach, T. et al. Fpga-placement via quantum annealing. In Proceedings of the 2024 ACM SIGDA International Symposium on Field Programmable Gate Arrays, FPGA 24, 43 (Association for Computing Machinery, New York, NY, USA, 2024). 9. Patel, S., Canoza, P. Salahuddin, S. Logically synthesized and hardware-accelerated re- stricted Boltzmann machines for combinatorial optimization and integer factorization. Nature Electronics 2022 5:2 5, 92 101 (2022). 10. Borders, W. A. et al. Integer factorization using stochastic magnetic tunnel junctions. Nature 573, 390 393 (2019). 11. Aadit, N. A. et al. Massively parallel probabilistic computing with sparse ising machines. Nature Electronics 5, 460 468 (2022). 12. Patel, S. et al. PASS: An Asynchronous Probabilistic Processor for Next Generation Intelli- gence. ArXiv (2024). abs 2409.10325. 13. McMahon, P. L. et al. A fully programmable 100-spin coherent ising machine with all-to-all connections. Science 354, 614 617 (2016). aah5178. 14 14. Moy, W. et al. A 1,968-node coupled ring oscillator circuit for combinatorial optimization problem solving. Nature Electronics 5, 310 317 (2022). 15. Chowdhury, S., Camsari, K. Y. Datta, S. Accelerated quantum monte carlo with probabilis- tic computers. Communications Physics 6, 1 7 (2023). 16.\n\n--- Segment 16 ---\nCommunications Physics 6, 1 7 (2023). 16. Lo, H., Moy, W., Yu, H., Sapatnekar, S. Kim, C. H. An Ising solver chip based on coupled ring oscillators with a 48-node all-to-all connected array architecture. Nature Electronics 6, 771 778 (2023). 17. McGeoch, C., Farre, P. Boothby, K. The D-Wave Advantage2 Prototype. Tech. Rep., D-Wave Systems Inc. (2023). Technical Report. 18. Yue, W., Zhang, T., Jing, Z. et al. A scalable universal ising machine based on interaction- centric storage and compute-in-memory. Nature Electronics (2024). 19. Chiang, H.-W., Nien, C.-F., Cheng, H.-Y. Huang, K.-P. Reaim: A reram-based adaptive ising machine for solving combinatorial optimization problems. In 2024 ACM IEEE 51st Annual International Symposium on Computer Architecture (ISCA), 58 72 (2024). 20. Inagaki, T. et al. A coherent ising machine for 2000-node optimization problems. Science 354, 603 606 (2016). 21. Wang, T. Roychowdhury, J. Oim: Oscillator-based ising machines for solving combinatorial optimisation problems. In McQuillan, I. Seki, S. (eds.) Unconventional Computation and Natural Computation, 232 256 (Springer International Publishing, Cham, 2019). 22. Chen, Z. et al. ON-OFF Neuromorphic ISING Machines using Fowler-Nordheim Annealers. ArXiv (2024). 2406.05224. 23. Niazi, S., Chowdhury, S., Aadit, N. et al. Training deep boltzmann networks with sparse ising machines. Nature Electronics 7, 610 619 (2024). 24. McGeoch, C. C., Chern, K., Farré, P. King, A. K. A comment on comparing optimization on D-Wave and IBM quantum processors. ArXiv (2024). 2406.19351. 25.\n\n--- Segment 17 ---\n2406.19351. 25. Camsari, K. Y., Faria, R., Sutton, B. M. Datta, S. Stochastic p-bits for invertible logic. Phys. Rev. X 7, 031014 (2017). 26. Patel, S., Chen, L., Canoza, P. Salahuddin, S. Ising Model Optimization Problems on a FPGA Accelerated Restricted Boltzmann Machine (2020). 27. Lucas, A. Ising formulations of many np problems. Frontiers in Physics 2 (2014). 28. Silva, C., Aguiar, A., Lima, P. et al. Mapping graph coloring to quantum annealing. Quantum Machine Intelligence 2, 16 (2020). 15 29. Kawakami, S. et al. A constrained graph coloring solver based on ising machines. In 2023 IEEE International Conference on Consumer Electronics (ICCE), 1 6 (2023). 30. Inaba, K., Inagaki, T., Igarashi, K. et al. Potts model solver based on hybrid physical and digital architecture. Communications Physics 5, 137 (2022). 31. Whitehead, W., Nelson, Z., Camsari, K. et al. Cmos-compatible ising and potts annealing using single-photon avalanche diodes. Nature Electronics 6, 1009 1019 (2023). 32. Hertz, A. de Werra, D. Using tabu search techniques for graph coloring. Computing 39, 345 351 (1987). 33. Schuetz, M. J. A., Brubaker, J. K., Zhu, Z. Katzgraber, H. G. Graph coloring with physics- inspired graph neural networks. Phys. Rev. Res. 4, 043131 (2022). 34. Li, W. et al. Rethinking graph neural networks for the graph coloring problem. ArXiv (2022). 2208.06975. 35. Koopmans, T. C. Beckmann, M. Assignment problems and the location of economic activ- ities. Econometrica 25, 53 76 (1957). Accessed 29 Sept. 2024. 36. Kahng, A.\n\n--- Segment 18 ---\n36. Kahng, A. B., Park, C.-H., Xu, X. Yao, H. Layout decomposition approaches for double patterning lithography. IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems 29, 939 952 (2010). 37. Smith, M. D., Ramsey, N. Holloway, G. A generalized algorithm for graph-coloring register allocation. In Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation, PLDI 04, 277 288 (Association for Computing Machinery, New York, NY, USA, 2004). 38. Ciesielski, M., Yang, S. Perkowski, M. Multiple-valued boolean minimization based on graph coloring. In Proceedings 1989 IEEE International Conference on Computer Design: VLSI in Computers and Processors, 262 265 (1989). 39. Earl, D. J. Deem, M. W. Parallel tempering: theory, applications, and new perspectives. Physical Chemistry Chemical Physics 7, 3910 3916 (2005). 40. Trick, M. COLOR Dataset (2002). Accessed: 2024-09-29. 41. Gualandi, S. Malucelli, F. Exact solution of graph coloring problems via constraint pro- gramming and column generation. INFORMS Journal on Computing 24, 81 100 (2012).\n\n--- Segment 19 ---\nGualandi, S. Malucelli, F. Exact solution of graph coloring problems via constraint pro- gramming and column generation. INFORMS Journal on Computing 24, 81 100 (2012). 16 Extended Data Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 60 70 Energy anna Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 Energy david Invalid States Ising Valid States Ising Valid States Vectorized 0 20 40 60 80 100 Energy games120 Invalid States Ising Valid States Ising Valid States Vectorized 0 2 4 6 8 10 12 14 Energy myciel3 Invalid States Ising Valid States Ising Valid States Vectorized 0 5 10 15 20 25 Energy myciel4 Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 Energy myciel5 Invalid States Ising Valid States Ising Valid States Vectorized 0 20 40 60 80 100 Energy myciel6 Invalid States Ising Valid States Ising Valid States Vectorized 0 50 100 150 200 Energy myciel7 Invalid States Ising Valid States Ising Valid States Vectorized 50 75 100 125 150 175 200 Energy queen11_11 Invalid States Ising Valid States Ising Valid States Vectorized 100 150 200 250 Energy queen13_13 Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 60 Energy queen5_5 Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 Energy queen6_6 Invalid States Ising Valid States Ising Valid States Vectorized 10 20 30 40 50 60 70 80 Energy queen7_7 Invalid States Ising Valid States Ising Valid States Vectorized 0 20 40 60 80 100 120 Energy queen8_12 Invalid States Ising Valid States Ising Valid States Vectorized 20 40 60 80 100 Energy queen8_8 Invalid States Ising Valid States Ising Valid States Vectorized 20 40 60 80 100 120 Energy queen9_9 Figure S1: Valid and invalid energy states explored while solving the graph coloring problem instances 40 on Ising and Vectorized mapping framework.\n\n--- Segment 20 ---\nINFORMS Journal on Computing 24, 81 100 (2012). 16 Extended Data Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 60 70 Energy anna Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 Energy david Invalid States Ising Valid States Ising Valid States Vectorized 0 20 40 60 80 100 Energy games120 Invalid States Ising Valid States Ising Valid States Vectorized 0 2 4 6 8 10 12 14 Energy myciel3 Invalid States Ising Valid States Ising Valid States Vectorized 0 5 10 15 20 25 Energy myciel4 Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 Energy myciel5 Invalid States Ising Valid States Ising Valid States Vectorized 0 20 40 60 80 100 Energy myciel6 Invalid States Ising Valid States Ising Valid States Vectorized 0 50 100 150 200 Energy myciel7 Invalid States Ising Valid States Ising Valid States Vectorized 50 75 100 125 150 175 200 Energy queen11_11 Invalid States Ising Valid States Ising Valid States Vectorized 100 150 200 250 Energy queen13_13 Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 60 Energy queen5_5 Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 Energy queen6_6 Invalid States Ising Valid States Ising Valid States Vectorized 10 20 30 40 50 60 70 80 Energy queen7_7 Invalid States Ising Valid States Ising Valid States Vectorized 0 20 40 60 80 100 120 Energy queen8_12 Invalid States Ising Valid States Ising Valid States Vectorized 20 40 60 80 100 Energy queen8_8 Invalid States Ising Valid States Ising Valid States Vectorized 20 40 60 80 100 120 Energy queen9_9 Figure S1: Valid and invalid energy states explored while solving the graph coloring problem instances 40 on Ising and Vectorized mapping framework. 17 0 100 200 300 400 500 Sample 0 10 20 30 40 50 Energy anna 0 100 200 300 400 500 Sample 0 10 20 30 40 Energy david 0 100 200 300 400 500 Sample 0 20 40 60 80 100 Energy games120 0 100 200 300 400 500 Sample 0 1 2 3 4 5 6 Energy myciel3 0 100 200 300 400 500 Sample 0 2 4 6 8 10 12 14 16 Energy myciel4 0 100 200 300 400 500 Sample 0 10 20 30 40 Energy myciel5 0 100 200 300 400 500 Sample 0 20 40 60 80 Energy myciel6 0 100 200 300 400 500 Sample 0 25 50 75 100 125 150 175 Energy myciel7 0 100 200 300 400 500 Sample 40 60 80 100 120 140 160 180 Energy queen11_11 0 100 200 300 400 500 Sample 75 100 125 150 175 200 225 Energy queen13_13 0 100 200 300 400 500 Sample 0 5 10 15 20 25 30 Energy queen5_5 0 100 200 300 400 500 Sample 5 10 15 20 25 30 35 Energy queen6_6 0 100 200 300 400 500 Sample 10 20 30 40 50 60 70 Energy queen7_7 0 100 200 300 400 500 Sample 0 20 40 60 80 100 Energy queen8_12 0 100 200 300 400 500 Sample 20 40 60 80 Energy queen8_8 0 100 200 300 400 500 Sample 20 40 60 80 100 Energy queen9_9 Figure S2: Evolution of energy while solving the graph coloring problem instances 40 on Ising and Vectorized mapping framework.\n\n--- Segment 21 ---\n16 Extended Data Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 60 70 Energy anna Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 Energy david Invalid States Ising Valid States Ising Valid States Vectorized 0 20 40 60 80 100 Energy games120 Invalid States Ising Valid States Ising Valid States Vectorized 0 2 4 6 8 10 12 14 Energy myciel3 Invalid States Ising Valid States Ising Valid States Vectorized 0 5 10 15 20 25 Energy myciel4 Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 Energy myciel5 Invalid States Ising Valid States Ising Valid States Vectorized 0 20 40 60 80 100 Energy myciel6 Invalid States Ising Valid States Ising Valid States Vectorized 0 50 100 150 200 Energy myciel7 Invalid States Ising Valid States Ising Valid States Vectorized 50 75 100 125 150 175 200 Energy queen11_11 Invalid States Ising Valid States Ising Valid States Vectorized 100 150 200 250 Energy queen13_13 Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 60 Energy queen5_5 Invalid States Ising Valid States Ising Valid States Vectorized 0 10 20 30 40 50 Energy queen6_6 Invalid States Ising Valid States Ising Valid States Vectorized 10 20 30 40 50 60 70 80 Energy queen7_7 Invalid States Ising Valid States Ising Valid States Vectorized 0 20 40 60 80 100 120 Energy queen8_12 Invalid States Ising Valid States Ising Valid States Vectorized 20 40 60 80 100 Energy queen8_8 Invalid States Ising Valid States Ising Valid States Vectorized 20 40 60 80 100 120 Energy queen9_9 Figure S1: Valid and invalid energy states explored while solving the graph coloring problem instances 40 on Ising and Vectorized mapping framework. 17 0 100 200 300 400 500 Sample 0 10 20 30 40 50 Energy anna 0 100 200 300 400 500 Sample 0 10 20 30 40 Energy david 0 100 200 300 400 500 Sample 0 20 40 60 80 100 Energy games120 0 100 200 300 400 500 Sample 0 1 2 3 4 5 6 Energy myciel3 0 100 200 300 400 500 Sample 0 2 4 6 8 10 12 14 16 Energy myciel4 0 100 200 300 400 500 Sample 0 10 20 30 40 Energy myciel5 0 100 200 300 400 500 Sample 0 20 40 60 80 Energy myciel6 0 100 200 300 400 500 Sample 0 25 50 75 100 125 150 175 Energy myciel7 0 100 200 300 400 500 Sample 40 60 80 100 120 140 160 180 Energy queen11_11 0 100 200 300 400 500 Sample 75 100 125 150 175 200 225 Energy queen13_13 0 100 200 300 400 500 Sample 0 5 10 15 20 25 30 Energy queen5_5 0 100 200 300 400 500 Sample 5 10 15 20 25 30 35 Energy queen6_6 0 100 200 300 400 500 Sample 10 20 30 40 50 60 70 Energy queen7_7 0 100 200 300 400 500 Sample 0 20 40 60 80 100 Energy queen8_12 0 100 200 300 400 500 Sample 20 40 60 80 Energy queen8_8 0 100 200 300 400 500 Sample 20 40 60 80 100 Energy queen9_9 Figure S2: Evolution of energy while solving the graph coloring problem instances 40 on Ising and Vectorized mapping framework. 18\n\n